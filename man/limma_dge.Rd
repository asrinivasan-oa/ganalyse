% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fpkm-dge.R
\name{limma_dge}
\alias{fpkm-dge}
\alias{limma_dge}
\alias{limma_dge.ExpressionSet}
\alias{limma_dge.default}
\alias{limma_dge.fpkm_counts}
\alias{limma_dge.raw_counts}
\title{Using \code{limma_dge} for \code{raw} and \code{fpkm} counts}
\usage{
limma_dge(x, ...)

\method{limma_dge}{default}(x, ...)

\method{limma_dge}{ExpressionSet}(x, design, contrast, voom = FALSE, ...)

\method{limma_dge}{fpkm_counts}(x, design, contrast, voom = FALSE, ...)

\method{limma_dge}{raw_counts}(x, design, contrast, voom = TRUE, ...)
}
\arguments{
\item{x}{An object of class \code{fpkm_counts}, \code{raw_counts} or 
\code{ExpressionSet}.}

\item{...}{Additional arguments.}

\item{design}{A design matrix. See \code{\link{construct_design}}.}

\item{contrast}{Contrast to compute DGE for. See 
\code{\link{construct_contrasts}}.}

\item{voom}{Logical. If \code{TRUE}, applies \code{voom} transformation. 
Default is \code{FALSE}. Only relevant for \code{limma_dge} method.}
}
\value{
An object of class \code{dge} consisting of top tables from 
running the corresponding \code{limma_dge} method.
}
\description{
\code{limma_dge} uses the \code{limma} package for DGE 
analysis on \code{fpkm_counts} and \code{raw_counts} object, and optionally 
also directly on an \code{ExpressionSet} object.
}
\section{Note}{
 The term differential gene expression or \code{DGE} is not 
used in a restrictive manner and applies to genomic features in general, 
i.e., genes, transcripts, exons etc.
}
\examples{
path = system.file("tests", package="ganalyse")

# ----- fpkm ----- # 
fpkm_path = file.path(path, "fpkm", "annotation.txt")
fpkm_obj = rnaseq(fpkm_path, format="fpkm", experiment="sample")
fpkm_counts = gather_counts(fpkm_obj, by="gene-id", log_base=2L)
fpkm_design = construct_design(fpkm_counts, ~ 0 + condition)
fpkm_contrasts = construct_contrasts(
                     design = fpkm_design, 
                     treatA.vs.control = conditiontreatA-conditioncontrol, 
                     treatB.vs.control = conditiontreatB-conditioncontrol
                 )
# DE genes between treatA and control
limma_dge(fpkm_counts, design=fpkm_design, 
             contrast=fpkm_contrasts[, "treatA.vs.control"])
# DE genes between treatB vs control
limma_dge(fpkm_counts, design=fpkm_design, 
             contrast=fpkm_contrasts[, "treatB.vs.control"])
# DE genes between any of the treatments
limma_dge(fpkm_counts, design=fpkm_design, contrast=fpkm_contrasts)

# ----- raw ----- # 
raw_path = file.path(path, "raw", "annotation.txt")
raw_obj = rnaseq(raw_path, format="raw", experiment="sample")
raw_counts = gather_counts(raw_obj, by="gene-id", threshold=1L)
raw_design = construct_design(raw_counts, ~ 0 + condition)
raw_contrasts = construct_contrasts(
                     design = raw_design, 
                     treatA.vs.control = conditiontreatA-conditioncontrol, 
                     treatB.vs.control = conditiontreatB-conditioncontrol
                 )
# DE genes between treatA and control
limma_dge(raw_counts, design=raw_design, 
             contrast=raw_contrasts[, "treatA.vs.control"])
# DE genes between treatB and control
limma_dge(raw_counts, design=raw_design, 
             contrast=raw_contrasts[, "treatB.vs.control"])
# DE genes between any of the treatments
limma_dge(raw_counts, design=raw_design, contrast=raw_contrasts)

}
\seealso{
\code{\link{rnaseq}}, \code{\link{gather_counts}} 
\code{\link{show_counts}} \code{\link{edger_dge}} 
\code{\link{construct_design}} \code{\link{construct_contrasts}} 
\code{\link{write_dge}} \code{\link{as.dgelist}} \code{\link{as.eset}}
\code{\link{volcano_plot}} \code{\link{density_plot}}
}

